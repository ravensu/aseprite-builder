name: Build and release Aseprite

on:
  push:
    branches:
      - main
    paths:
      - 'BuildLog.md'
  workflow_dispatch:

env:
  BUILD_TYPE: Release

jobs:
  fetch-aseprite-info:
    name: Fetch deps info
    runs-on: ubuntu-latest
    outputs:
      download-link: ${{ steps.aseprite-link.outputs.download-link }}
      release-tag: ${{ steps.aseprite-link.outputs.release-tag }}
    steps:
      - name: Fetch Aseprite release link
        id: aseprite-link
        uses: a1393323447/fetch-release@main
        with:
            group: aseprite
            repo: aseprite
            match: Aseprite-.*?-Source.zip

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: fetch-aseprite-info
    permissions:
      contents: write
    outputs:
      download-link: ${{ needs.fetch-aseprite-info.outputs.download-link }}
      release-tag: ${{ needs.fetch-aseprite-info.outputs.release-tag }}
    steps:
      - uses: actions/checkout@v2
      - uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.fetch-aseprite-info.outputs.release-tag }}
          body: Aseprite-${{ needs.fetch-aseprite-info.outputs.release-tag }}
          skipIfReleaseExists: true
          token: ${{ secrets.GITHUB_TOKEN }}

  build-aseprite:
    name: Build Aseprite
    needs: create-release
    permissions:
      contents: write
    runs-on: ${{ matrix.os }}
    strategy:
        matrix:
          os: [ windows-latest, ubuntu-latest, macOS-latest ]
        fail-fast: false
    steps:
      - name: Install Dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y \
            libpixman-1-dev libfreetype6-dev libharfbuzz-dev zlib1g-dev \
            libx11-dev libxcursor-dev libxi-dev libgl1-mesa-dev libfontconfig1-dev

      - uses: actions/checkout@v4

      - name: Install Aseprite
        run: git clone --recurse-submodules -j8 https://github.com/aseprite/aseprite --branch ${{ needs.create-release.outputs.release-tag }}

      - name: Install Skia
        working-directory: aseprite
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            choco install wget -y --no-progress
            wget https://github.com/aseprite/skia/releases/download/m124-08a5439a6b/Skia-Windows-Release-x64.zip
            unzip Skia-Windows-Release-x64.zip -d skia
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            wget https://github.com/aseprite/skia/releases/download/m124-08a5439a6b/Skia-macOS-Release-arm64.zip
            unzip Skia-macOS-Release-arm64.zip -d skia-arm64
            wget https://github.com/aseprite/skia/releases/download/m124-08a5439a6b/Skia-macOS-Release-x64.zip
            unzip Skia-macOS-Release-x64.zip -d skia-x64
          else
            wget https://github.com/aseprite/skia/releases/download/m124-08a5439a6b/Skia-Linux-Release-x64.zip
            unzip Skia-Linux-Release-x64.zip -d skia
          fi

      - uses: aseprite/get-ninja@main

      - uses: ilammy/msvc-dev-cmd@v1
        if: runner.os == 'Windows'

      - name: Build Aseprite (macOS Universal2)
        if: runner.os == 'macOS'
        working-directory: aseprite
        run: |
          for arch in arm64 x64; do
            cmake -S . -B build-$arch -G Ninja \
              -DCMAKE_BUILD_TYPE=Release \
              -DENABLE_TESTS=OFF \
              -DENABLE_SCRIPTING=ON \
              -DENABLE_CCACHE=OFF \
              -DLAF_BACKEND=skia \
              -DSKIA_DIR=$(realpath skia-$arch) \
              -DSKIA_LIBRARY_DIR=$(realpath skia-$arch/out/Release-$arch)
            cd build-$arch && ninja && cd ..
          done
          mkdir -p universal_bin
          lipo -create -output universal_bin/aseprite build-arm64/bin/aseprite build-x64/bin/aseprite
          cp -r build-arm64/bin/data universal_bin/
          echo '# This file is here so Aseprite behaves as a portable program' > universal_bin/aseprite.ini

      - name: Create Release Package
        working-directory: aseprite/universal_bin
        run: zip -r Aseprite-${{ needs.create-release.outputs.release-tag }}-macOS-universal.zip *

      - name: Upload Release Artifact (macOS)
        uses: actions/upload-artifact@v3
        with:
          name: Aseprite-macOS-universal
          path: aseprite/universal_bin/Aseprite-${{ needs.create-release.outputs.release-tag }}-macOS-universal.zip

      - name: Upload Release (macOS)
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: aseprite/universal_bin/Aseprite-${{ needs.create-release.outputs.release-tag }}-macOS-universal.zip
          asset_name: Aseprite-${{ needs.create-release.outputs.release-tag }}-macOS-universal.zip
          tag: ${{ needs.create-release.outputs.release-tag }}
